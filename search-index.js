var N = null;var searchIndex = {};
searchIndex["actix"]={"doc":"Actix is a rust actors framework","items":[[3,"SpawnHandle","actix","A handle to a spawned future.",N,N],[3,"Addr","","The address of an actor.",N,N],[3,"Recipient","","The `Recipient` type allows to send one specific message…",N,N],[3,"WeakAddr","","A weakly referenced counterpart to `Addr<A>`.",N,N],[3,"Arbiter","","An event loop controller.",N,N],[3,"ArbiterBuilder","","A builder to create a customized arbiter.",N,N],[3,"Context","","An actor execution context.",N,N],[3,"ActorResponse","","A helper type for representing different types of message…",N,N],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",N,N],[12,"0","","",0,N],[3,"Response","","Helper type for representing different type of message…",N,N],[3,"Supervisor","","Actor supervisor",N,N],[3,"System","","System is an actor which manages runtime.",N,N],[3,"SystemRunner","","Helper object that runs System's event loop",N,N],[4,"ActorState","","Actor execution state",N,N],[13,"Started","","Actor is started.",1,N],[13,"Running","","Actor is running.",1,N],[13,"Stopping","","Actor is stopping.",1,N],[13,"Stopped","","Actor is stopped.",1,N],[4,"Running","","",N,N],[13,"Stop","","",2,N],[13,"Continue","","",2,N],[4,"MailboxError","","The errors that can occur during the message delivery…",N,N],[13,"Closed","","",3,N],[13,"Timeout","","",3,N],[5,"run","","Starts the system and executes the supplied future.",N,[[["f"]]]],[5,"spawn","","Spawns a future on the current arbiter.",N,[[["f"]]]],[11,"alive","","Indicates whether the actor is alive.",1,[[["self"]],["bool"]]],[11,"stopping","","Indicates whether the actor is stopped or stopping.",1,[[["self"]],["bool"]]],[11,"next","","Gets the next handle.",4,[[["self"]],["spawnhandle"]]],[11,"builder","","Returns a builder object for customized arbiter creation.",5,[[],["arbiterbuilder"]]],[11,"new","","Spawns a new thread and runs the event loop in the spawned…",5,[[["t"]],["addr",["arbiter"]]]],[11,"name","","Returns current arbiter's name",5,[[],["string"]]],[11,"current","","Returns the current arbiter's address.",5,[[],["addr",["arbiter"]]]],[11,"registry","","Returns the arbiter's registry,",5,[[],["registry"]]],[11,"spawn","","Executes a future on the current thread.",5,[[["f"]]]],[11,"spawn_fn","","Executes a lazily constructed future on the current thread.",5,[[["f"]]]],[11,"start","","Starts an actor inside a newly created arbiter.",5,[[["f"]],["addr"]]],[11,"name","","Sets the name of the arbiter.",6,[[["self"],["t"]],["self"]]],[11,"stop_system_on_panic","","Sets the option `stop_system_on_panic` which controls…",6,[[["self"],["bool"]],["self"]]],[11,"clock","","Sets the clock instance that will be used by this arbiter.",6,[[["self"],["clock"]],["self"]]],[11,"build","","Spawns a new thread and runs the event loop in the spawned…",6,[[["self"]],["addr",["arbiter"]]]],[11,"start","","Starts an actor inside a newly created arbiter.",6,[[["self"],["f"]],["addr"]]],[11,"with_receiver","","",7,[[["addressreceiver"]],["context"]]],[11,"run","","",7,[[["self"],["a"]],["addr"]]],[11,"into_future","","",7,[[["self"],["a"]],["contextfut"]]],[11,"handle","","Returns a handle to the running future.",7,[[["self"]],["spawnhandle"]]],[11,"set_mailbox_capacity","","Sets the mailbox capacity.",7,[[["self"],["usize"]]]],[11,"async","","Creates an asynchronous response.",8,[[["t"]],["self"]]],[11,"reply","","Creates a response.",8,[[["result"]],["self"]]],[11,"reply","","Creates a response.",9,[[["result"]],["self"]]],[11,"async","","Creates an asynchronous response.",9,[[["t"]],["self"]]],[11,"start","","Start new supervised actor in current tokio runtime.",10,[[["f"]],["addr"]]],[11,"start_in_arbiter","","Start new supervised actor in arbiter's thread.",10,[[["addr"],["f"]],["addr"]]],[11,"builder","","Build a new system with a customized tokio runtime.",11,[[],["builder"]]],[11,"new","","Create new system.",11,[[["t"]],["systemrunner"]]],[11,"current","","Get current running system.",11,[[],["system"]]],[11,"with_current","","Execute function with system reference.",11,[[["f"]],["r"]]],[11,"stop","","Stop the system",11,[[["self"]]]],[11,"stop_with_code","","Stop the system with a particular exit code.",11,[[["self"],["i32"]]]],[11,"arbiter","","System arbiter",11,[[["self"]],["addr"]]],[11,"registry","","Get current system registry.",11,[[["self"]],["systemregistry"]]],[11,"run","","This function will start tokio runtime and will finish…",11,[[["f"]],["i32"]]],[11,"run","","This function will start event loop and will finish once…",12,[[["self"]],["i32"]]],[11,"block_on","","Execute a future and wait for result.",12,[[["self"],["f"]],["result"]]],[11,"new","","",13,[[["addresssender"]],["addr"]]],[11,"connected","","Returns whether the actor is still alive.",13,[[["self"]],["bool"]]],[11,"do_send","","Sends a message unconditionally.",13,[[["self"],["m"]]]],[11,"try_send","","Tries to send a message.",13,[[["self"],["m"]],["result",["senderror"]]]],[11,"send","","Sends an asynchronous message and waits for a response.",13,[[["self"],["m"]],["request"]]],[11,"recipient","","Returns the `Recipient` for a specific message type.",13,[[["self"]],["recipient"]]],[11,"downgrade","","Returns a downgraded `WeakAddr`.",13,[[["self"]],["weakaddr"]]],[11,"upgrade","","Attempts to upgrade the `WeakAddr<A>` pointer to an…",14,[[["self"]],["option",["addr"]]]],[11,"do_send","","Sends a message.",15,[[["self"],["m"]],["result",["senderror"]]]],[11,"try_send","","Attempts to send a message.",15,[[["self"],["m"]],["result",["senderror"]]]],[11,"send","","Sends a message and asynchronously wait for a response.",15,[[["self"],["m"]],["recipientrequest"]]],[0,"actors","","Helper actors",N,N],[0,"mocker","actix::actors","Mocking utility actor.",N,N],[3,"Mocker","actix::actors::mocker","This actor is able to wrap another actor and accept all…",N,N],[11,"mock","","",16,[[["box",["fnmut"]]],["mocker"]]],[0,"resolver","actix::actors","DNS resolver and connector utility actor",N,N],[3,"Resolve","actix::actors::resolver","",N,N],[12,"name","","",17,N],[12,"port","","",17,N],[3,"Connect","","",N,N],[12,"name","","",18,N],[12,"port","","",18,N],[12,"timeout","","",18,N],[3,"ConnectAddr","","",N,N],[12,"0","","",19,N],[3,"Resolver","","",N,N],[3,"TcpConnector","","A TCP stream connector.",N,N],[4,"ResolverError","","",N,N],[13,"Resolver","","Failed to resolve the hostname",20,N],[13,"InvalidInput","","Address is invalid",20,N],[13,"Timeout","","Connecting took too long",20,N],[13,"IoError","","Connection io error",20,N],[6,"Connector","","",N,N],[6,"ConnectorError","","",N,N],[11,"host","","",17,[[["t"]],["resolve"]]],[11,"host_and_port","","",17,[[["t"],["u16"]],["resolve"]]],[11,"host","","",18,[[["t"]],["connect"]]],[11,"host_and_port","","",18,[[["t"],["u16"]],["connect"]]],[11,"timeout","","Set connect timeout",18,[[["self"],["duration"]],["connect"]]],[11,"new","","",21,[[["resolverconfig"],["resolveropts"]],["resolver"]]],[11,"new","","",22,[[["vecdeque",["socketaddr"]]],["tcpconnector"]]],[11,"with_timeout","","",22,[[["vecdeque",["socketaddr"]],["duration"]],["tcpconnector"]]],[0,"signal","actix::actors","An actor implementation of Unix signal handling.",N,N],[3,"Signal","actix::actors::signal","A message representing a received signal.",N,N],[12,"0","","",23,N],[3,"ProcessSignals","","An actor that handles Unix signals.",N,N],[3,"Subscribe","","Subscribe to process signals.",N,N],[12,"0","","",24,N],[3,"DefaultSignalsHandler","","Default signals handler.",N,N],[4,"SignalType","","Represents the different types of signals a process can…",N,N],[13,"Hup","","`SIGHUP`",25,N],[13,"Int","","`SIGINT`",25,N],[13,"Term","","`SIGTERM`",25,N],[13,"Quit","","`SIGQUIT`",25,N],[13,"Child","","`SIGCHLD`",25,N],[0,"clock","actix","A configurable source of time.",N,N],[5,"now","actix::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[3,"Clock","","A handle to a source of time.",N,N],[8,"Now","","Returns `Instant` values representing the current instant…",N,N],[10,"now","","Returns an instant corresponding to \"now\".",26,[[["self"]],["instant"]]],[0,"fut","actix","Custom `Future` implementation with `Actix` support",N,N],[3,"AndThen","actix::fut","Future for the `and_then` combinator, chaining a…",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error…",N,N],[3,"Finish","","A combinator used to convert a stream into a future; the…",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a…",N,N],[3,"DropErr","","",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error…",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"StreamAndThen","","A stream combinator which chains a computation onto values…",N,N],[3,"StreamFinish","","A combinator used to convert stream into a future, future…",N,N],[3,"StreamFold","","A future used to collect all the results of a stream into…",N,N],[3,"StreamMap","","A stream combinator which will change the type of a stream…",N,N],[3,"StreamMapErr","","A stream combinator which will change the error type of a…",N,N],[3,"StreamThen","","A stream combinator which chains a computation onto each…",N,N],[3,"StreamTimeout","","Future for the `timeout` combinator, interrupts…",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on…",N,N],[3,"Timeout","","Future for the `timeout` combinator, interrupts…",N,N],[3,"FutureWrap","","",N,N],[3,"StreamWrap","","",N,N],[4,"Either","","Combines two different futures yielding the same item and…",N,N],[13,"A","","First branch of the type",27,N],[13,"B","","Second branch of the type",27,N],[5,"err","","Creates a \"leaf future\" from an immediate value of a…",N,[[["e"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a…",N,[[["t"]],["futureresult"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the…",N,[[["result"]],["futureresult"]]],[5,"wrap_future","","Converts normal future into `ActorFuture`, allowing its…",N,[[["f"]],["futurewrap"]]],[5,"wrap_stream","","Converts normal stream into `ActorStream`",N,[[["s"]],["streamwrap"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",27,N],[11,"new","","",28,[[["s"]],["finish"]]],[8,"ActorFuture","","Trait for types which are a placeholder of a value that…",N,N],[16,"Item","","The type of value that this future will resolved with if…",29,N],[16,"Error","","The type of error that this future will resolve with if it…",29,N],[16,"Actor","","The actor within which this future runs",29,N],[10,"poll","","",29,N],[11,"map","","Map this future's result to a different type, returning a…",29,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a…",29,[[["self"],["f"]],["maperr"]]],[11,"drop_err","","Drop this future's error, returning a new future.",29,[[["self"]],["droperr"]]],[11,"from_err","","Map this future's error to any error implementing `From`…",29,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing…",29,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved…",29,[[["self"],["f"]],["andthen"]]],[11,"timeout","","Add timeout to futures chain.",29,N],[8,"ActorStream","","A stream of values, not all of which may have been…",N,N],[16,"Item","","The type of item this stream will yield on success.",30,N],[16,"Error","","The type of error this stream may generate.",30,N],[16,"Actor","","The actor within which this stream runs.",30,N],[10,"poll","","",30,N],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",30,[[["self"],["f"]],["streammap"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error…",30,[[["self"],["f"]],["streammaperr"]]],[11,"then","","Chain on a computation for when a value is ready, passing…",30,[[["self"],["f"]],["streamthen"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing…",30,[[["self"],["f"]],["streamandthen"]]],[11,"fold","","Execute an accumulating computation over a stream,…",30,[[["self"],["t"],["f"]],["streamfold"]]],[11,"timeout","","Add timeout to stream.",30,N],[11,"finish","","Converts a stream to a future that resolves when stream…",30,[[["self"]],["streamfinish"]]],[8,"IntoActorFuture","","Class of types which can be converted into an actor future.",N,N],[16,"Future","","The future that this type can be converted into.",31,N],[16,"Item","","The item that the future may resolve with.",31,N],[16,"Error","","The error that the future may resolve with.",31,N],[16,"Actor","","The actor within which this future runs",31,N],[10,"into_future","","Consumes this object and produces a future.",31,N],[8,"WrapFuture","","Helper trait that allows conversion of normal future into…",N,N],[16,"Future","","The future that this type can be converted into.",32,N],[16,"Item","","The item that the future may resolve with.",32,N],[16,"Error","","The error that the future may resolve with.",32,N],[10,"into_actor","","Convert normal future to a ActorFuture",32,N],[8,"WrapStream","","Helper trait that allows conversion of normal stream into…",N,N],[16,"Stream","","The stream that this type can be converted into.",33,N],[16,"Item","","The item that the future may resolve with.",33,N],[16,"Error","","The error that the future may resolve with.",33,N],[10,"into_actor","","Convert normal stream to a ActorStream",33,N],[0,"io","actix","",N,N],[3,"Writer","actix::io","A wrapper for `AsyncWrite` types.",N,N],[3,"FramedWrite","","A wrapper for the `AsyncWrite` and `Encoder` types.",N,N],[8,"WriteHandler","","A helper trait for write handling.",N,N],[11,"error","","Called when the writer emits error.",34,N],[11,"finished","","Called when the writer finishes.",34,N],[11,"new","","",35,[[["t"],["c"]],["writer"]]],[11,"close","","Gracefully closes the sink.",35,[[["self"]]]],[11,"closed","","Checks if the sink is closed.",35,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",35,[[["self"],["usize"],["usize"]]]],[11,"write","","Sends an item to the sink.",35,N],[11,"handle","","Returns the `SpawnHandle` for this writer.",35,[[["self"]],["spawnhandle"]]],[11,"new","","",36,[[["t"],["u"],["c"]],["framedwrite"]]],[11,"from_buffer","","",36,[[["t"],["u"],["bytesmut"],["c"]],["framedwrite"]]],[11,"close","","Gracefully closes the sink.",36,[[["self"]]]],[11,"closed","","Checks if the sink is closed.",36,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",36,[[["self"],["usize"],["usize"]]]],[11,"write","","Writes an item to the sink.",36,N],[11,"handle","","Returns the `SpawnHandle` for this writer.",36,[[["self"]],["spawnhandle"]]],[0,"msgs","actix","Actix system messages",N,N],[3,"StopArbiter","actix::msgs","Message to stop arbiter execution",N,N],[12,"0","","",37,N],[3,"StartActor","","Start actor in arbiter's thread",N,N],[3,"Execute","","Message to execute a function in an arbiter's thread.",N,N],[11,"new","","",38,[[["f"]],["self"]]],[11,"new","","",39,[[["f"]],["self"]]],[11,"exec","","Execute enclosed function",39,[[["self"]],["result"]]],[0,"registry","actix","Actors registry",N,N],[3,"Registry","actix::registry","Actors registry",N,N],[3,"SystemRegistry","","System wide actors registry",N,N],[8,"ArbiterService","","Trait defines arbiter's service.",N,N],[11,"start_service","","Construct and start arbiter service",40,[[],["addr"]]],[11,"service_started","","Method is called during service initialization.",40,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from arbiter registry",40,[[],["addr"]]],[8,"SystemService","","Trait defines system's service.",N,N],[11,"start_service","","Construct and start system service",41,[[["addr"]],["addr"]]],[11,"service_started","","Method is called during service initialization.",41,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from system registry",41,[[],["addr"]]],[11,"get","","Query registry for specific actor. Returns address of the…",42,[[["self"]],["addr"]]],[11,"query","","Check if actor is in registry, if so, return its address",42,[[["self"]],["option",["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",42,[[["self"],["addr"]]]],[11,"get","","Return address of the service. If service actor is not…",43,[[["self"]],["addr"]]],[11,"query","","Check if actor is in registry, if so, return its address",43,[[["self"]],["option",["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",43,[[["self"],["addr"]]]],[0,"sync","actix","Sync actors support",N,N],[3,"SyncArbiter","actix::sync","Sync arbiter",N,N],[3,"SyncContext","","Sync actor execution context",N,N],[11,"start","","Start new sync arbiter with specified number of worker…",44,[[["usize"],["f"]],["addr"]]],[0,"utils","actix","",N,N],[3,"Condition","actix::utils","",N,N],[3,"TimerFunc","","An `ActorFuture` that runs a function in the actor's…",N,N],[3,"IntervalFunc","","An `ActorStream` that periodically runs a function in the…",N,N],[11,"wait","","",45,[[["self"]],["receiver"]]],[11,"set","","",45,[[["self"],["t"]]]],[11,"new","","Creates a new `TimerFunc` with the given duration.",46,[[["duration"],["f"]],["timerfunc"]]],[11,"new","","Creates a new `IntervalFunc` with the given interval…",47,[[["duration"],["f"]],["intervalfunc"]]],[0,"prelude","actix","The `actix` prelude.",N,N],[3,"SpawnHandle","actix::prelude","A handle to a spawned future.",N,N],[3,"Addr","","The address of an actor.",N,N],[3,"Recipient","","The `Recipient` type allows to send one specific message…",N,N],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",N,N],[3,"Request","","A `Future` which represents an asynchronous message…",N,N],[3,"Arbiter","","An event loop controller.",N,N],[3,"Context","","An actor execution context.",N,N],[3,"ActorResponse","","A helper type for representing different types of message…",N,N],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",N,N],[12,"0","","",0,N],[3,"Response","","Helper type for representing different type of message…",N,N],[3,"Supervisor","","Actor supervisor",N,N],[3,"System","","System is an actor which manages runtime.",N,N],[4,"ActorState","","Actor execution state",N,N],[13,"Started","","Actor is started.",1,N],[13,"Running","","Actor is running.",1,N],[13,"Stopping","","Actor is stopping.",1,N],[13,"Stopped","","Actor is stopped.",1,N],[4,"Running","","",N,N],[13,"Stop","","",2,N],[13,"Continue","","",2,N],[4,"MailboxError","","The errors that can occur during the message delivery…",N,N],[13,"Closed","","",3,N],[13,"Timeout","","",3,N],[4,"SendError","","",N,N],[13,"Full","","",48,N],[13,"Closed","","",48,N],[6,"ResponseActFuture","","A specialized actor future for asynchronous message…",N,N],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",N,N],[8,"Actor","","Actors are objects which encapsulate state and behavior.",N,N],[16,"Context","","Actor execution context type",49,N],[11,"started","","Called when an actor gets polled the first time.",49,N],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",49,N],[11,"stopped","","Called after an actor is stopped.",49,N],[11,"start","","Start a new asynchronous actor, returning its address.",49,[[["self"]],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",49,[[],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",49,[[["f"]],["addr"]]],[8,"ActorContext","","Actor execution context.",N,N],[10,"stop","","Immediately stop processing incoming messages and switch…",50,[[["self"]]]],[10,"terminate","","Terminate actor execution",50,[[["self"]]]],[10,"state","","Actor execution state",50,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context.",N,N],[10,"address","","Returns the address of the context.",51,[[["self"]],["addr"]]],[10,"spawn","","Spawns a future into the context.",51,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",51,[[["self"],["f"]]]],[10,"waiting","","Checks if the context is paused (waiting for future…",51,[[["self"]],["bool"]]],[10,"cancel_future","","Cancels a spawned future.",51,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","","Registers a stream with the context.",51,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",51,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self.",51,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",51,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","","Actors with the ability to restart after failure.",N,N],[11,"restarting","","Called when the supervisor restarts a failed actor.",52,N],[8,"ContextFutureSpawner","","Helper trait which can spawn a future into the actor's…",N,N],[10,"spawn","","Spawns the future into the given context.",53,N],[10,"wait","","Spawns the future into the given context, waiting for it…",53,N],[8,"Handler","","Describes how to handle messages of a specific type.",N,N],[16,"Result","","The type of value that this handler will return.",54,N],[10,"handle","","This method is called for every message received by this…",54,N],[8,"Message","","Represent message that can be handled by an actor.",N,N],[16,"Result","","The type of value that this message will resolved with if…",55,N],[8,"StreamHandler","","Stream handler",N,N],[10,"handle","","Method is called for every message received by this Actor",56,N],[11,"started","","Method is called when stream get polled first time.",56,N],[11,"error","","Method is called when stream emits error.",56,N],[11,"finished","","Method is called when stream finishes.",56,N],[11,"add_stream","","This method register stream to an actor context and allows…",56,N],[0,"dev","actix","The `actix` prelude for library developers.",N,N],[3,"Envelope","actix::dev","",N,N],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",N,N],[3,"Request","","A `Future` which represents an asynchronous message…",N,N],[3,"ContextFut","","",N,N],[3,"ContextParts","","",N,N],[3,"Mailbox","","",N,N],[0,"channel","","",N,N],[3,"AddressReceiver","actix::dev::channel","The receiving end of a channel which implements the…",N,N],[3,"AddressSender","","The transmission end of a channel which is used to send…",N,N],[5,"channel","","Creates an in-memory channel implementation of the…",N,N],[8,"EnvelopeProxy","actix::dev","",N,N],[16,"Actor","","",57,N],[10,"handle","","handle message within new actor and context",57,N],[8,"ToEnvelope","","Converter trait, packs message into a suitable envelope.",N,N],[10,"pack","","Pack message into suitable envelope",58,[[["m"],["option",["sender"]]],["envelope"]]],[8,"AsyncContextParts","","",N,N],[10,"parts","","",59,[[["self"]],["contextparts"]]],[8,"MessageResponse","","A trait which defines message responses.",N,N],[10,"handle","","",60,N],[8,"ResponseChannel","","A trait that defines a message response channel.",N,N],[10,"is_canceled","","",61,[[["self"]],["bool"]]],[10,"send","","",61,N],[6,"ResponseActFuture","actix","A specialized actor future for asynchronous message…",N,N],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",N,N],[8,"Actor","","Actors are objects which encapsulate state and behavior.",N,N],[16,"Context","","Actor execution context type",49,N],[11,"started","actix::prelude","Called when an actor gets polled the first time.",49,N],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",49,N],[11,"stopped","","Called after an actor is stopped.",49,N],[11,"start","","Start a new asynchronous actor, returning its address.",49,[[["self"]],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",49,[[],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",49,[[["f"]],["addr"]]],[8,"ActorContext","actix","Actor execution context.",N,N],[10,"stop","","Immediately stop processing incoming messages and switch…",50,[[["self"]]]],[10,"terminate","","Terminate actor execution",50,[[["self"]]]],[10,"state","","Actor execution state",50,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context.",N,N],[10,"address","","Returns the address of the context.",51,[[["self"]],["addr"]]],[10,"spawn","","Spawns a future into the context.",51,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",51,[[["self"],["f"]]]],[10,"waiting","","Checks if the context is paused (waiting for future…",51,[[["self"]],["bool"]]],[10,"cancel_future","","Cancels a spawned future.",51,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","actix::prelude","Registers a stream with the context.",51,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",51,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self.",51,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",51,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","actix","Actors with the ability to restart after failure.",N,N],[11,"restarting","actix::prelude","Called when the supervisor restarts a failed actor.",52,N],[8,"Handler","actix","Describes how to handle messages of a specific type.",N,N],[16,"Result","","The type of value that this handler will return.",54,N],[10,"handle","","This method is called for every message received by this…",54,N],[8,"Message","","Represent message that can be handled by an actor.",N,N],[16,"Result","","The type of value that this message will resolved with if…",55,N],[8,"StreamHandler","","Stream handler",N,N],[10,"handle","","Method is called for every message received by this Actor",56,N],[11,"started","actix::prelude","Method is called when stream get polled first time.",56,N],[11,"error","","Method is called when stream emits error.",56,N],[11,"finished","","Method is called when stream finishes.",56,N],[11,"add_stream","","This method register stream to an actor context and allows…",56,N],[11,"from","actix","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_actor","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_future","","",10,[[["self"]],["f"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"as_fail","","",3,[[["self"]],["fail"]]],[11,"from","actix::dev","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_actor","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"to_string","actix::prelude","",48,[[["self"]],["string"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"as_fail","","",48,[[["self"]],["fail"]]],[11,"from","actix::dev::channel","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_actor","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","actix::dev","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_actor","actix::prelude","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"into_actor","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"from","actix::dev","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","actix::actors::mocker","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","actix::actors::resolver","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"into_future","","",22,[[["self"]],["f"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"as_fail","","",20,[[["self"]],["fail"]]],[11,"from","actix::actors::signal","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","actix::clock","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","actix::fut","",73,[[["self"]],["f"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_actor","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"into_future","","",28,[[["self"]],["f"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",81,[[["self"]],["f"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"into_future","","",86,[[["self"]],["f"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into_future","","",87,[[["self"]],["f"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"into_future","","",88,[[["self"]],["f"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into_future","","",27,[[["self"]],["f"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","actix::io","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","actix::msgs","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","actix::registry","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into_actor","actix::sync","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","actix::utils","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into_future","","",46,[[["self"]],["f"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"default","actix::clock","",72,[[],["clock"]]],[11,"clone","","",72,[[["self"]],["clock"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"started","actix::actors::resolver","",21,N],[11,"started","actix::actors::signal","",71,N],[11,"stop","actix","",7,[[["self"]]]],[11,"terminate","","",7,[[["self"]]]],[11,"state","","",7,[[["self"]],["actorstate"]]],[11,"stop","actix::sync","Stop current actor. SyncContext creates and starts new…",90,[[["self"]]]],[11,"terminate","","Terminate actor execution. SyncContext creates and starts…",90,[[["self"]]]],[11,"state","","Actor execution state",90,[[["self"]],["actorstate"]]],[11,"spawn","actix","",7,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","",7,[[["self"],["f"]]]],[11,"waiting","","",7,[[["self"]],["bool"]]],[11,"cancel_future","","",7,[[["self"],["spawnhandle"]],["bool"]]],[11,"address","","",7,[[["self"]],["addr"]]],[11,"parts","","",7,[[["self"]],["contextparts"]]],[11,"handle","","",5,[[["self"],["stoparbiter"],["context"]]]],[11,"handle","","",5,[[["self"],["startactor"],["context"]],["addr"]]],[11,"handle","","",5,[[["self"],["execute"],["context"]],["result"]]],[11,"handle","actix::actors::mocker","",16,N],[11,"handle","actix::actors::resolver","",21,N],[11,"handle","","",21,N],[11,"handle","","",21,N],[11,"handle","actix::actors::signal","",70,N],[11,"handle","","",71,N],[11,"handle","actix","",0,N],[11,"handle","","",13,N],[11,"handle","","",91,N],[11,"handle","","",92,N],[11,"handle","","",8,N],[11,"handle","","",9,N],[11,"pack","","",7,[[["m"],["option",["sender"]]],["envelope"]]],[11,"pack","actix::sync","",90,[[["m"],["option",["syncsender"]]],["envelope"]]],[11,"handle","actix::dev","",66,N],[11,"poll","actix::actors::resolver","",22,[[["self"],["resolver"],["context"]],["poll"]]],[11,"poll","actix::fut","",73,N],[11,"poll","","",27,N],[11,"poll","","",74,N],[11,"poll","","",75,N],[11,"poll","","",77,N],[11,"poll","","",76,N],[11,"poll","","",78,N],[11,"poll","","",80,N],[11,"poll","","",81,N],[11,"poll","","",86,N],[11,"poll","","",87,N],[11,"poll","","",88,N],[11,"poll","actix::utils","",46,N],[11,"poll","actix::fut","",79,N],[11,"poll","","",82,N],[11,"poll","","",83,N],[11,"poll","","",84,N],[11,"poll","","",85,N],[11,"poll","","",89,N],[11,"poll","actix::utils","",47,N],[11,"service_started","actix::actors::signal","",70,N],[11,"eq","actix","",1,[[["self"],["actorstate"]],["bool"]]],[11,"eq","","",2,[[["self"],["running"]],["bool"]]],[11,"eq","","",4,[[["self"],["spawnhandle"]],["bool"]]],[11,"ne","","",4,[[["self"],["spawnhandle"]],["bool"]]],[11,"eq","actix::dev::channel","",64,[[["self"],["self"]],["bool"]]],[11,"eq","actix","",13,[[["self"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"eq","actix::actors::resolver","",17,[[["self"],["resolve"]],["bool"]]],[11,"ne","","",17,[[["self"],["resolve"]],["bool"]]],[11,"eq","","",18,[[["self"],["connect"]],["bool"]]],[11,"ne","","",18,[[["self"],["connect"]],["bool"]]],[11,"eq","","",19,[[["self"],["connectaddr"]],["bool"]]],[11,"ne","","",19,[[["self"],["connectaddr"]],["bool"]]],[11,"eq","actix::actors::signal","",25,[[["self"],["signaltype"]],["bool"]]],[11,"default","actix","",4,[[],["spawnhandle"]]],[11,"default","actix::dev","",69,[[],["self"]]],[11,"default","actix::actors::mocker","",16,[[],["self"]]],[11,"default","actix::actors::resolver","",21,[[],["resolver"]]],[11,"default","actix::actors::signal","",70,[[],["self"]]],[11,"default","","",71,[[],["self"]]],[11,"default","actix::utils","",45,[[],["self"]]],[11,"clone","actix","",1,[[["self"]],["actorstate"]]],[11,"clone","","",2,[[["self"]],["running"]]],[11,"clone","","",4,[[["self"]],["spawnhandle"]]],[11,"clone","","",11,[[["self"]],["system"]]],[11,"clone","actix::dev::channel","",64,[[["self"]],["addresssender"]]],[11,"clone","actix","",13,[[["self"]],["addr"]]],[11,"clone","","",15,[[["self"]],["recipient"]]],[11,"clone","actix::actors::signal","",25,[[["self"]],["signaltype"]]],[11,"clone","actix::registry","",42,[[["self"]],["registry"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"from","actix::fut","",78,[[["result"]],["self"]]],[11,"drop","actix","",5,[[["self"]]]],[11,"drop","actix::dev::channel","",64,[[["self"]]]],[11,"drop","","",65,[[["self"]]]],[11,"into","actix","",13,[[["self"]],["recipient"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev::channel","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::prelude","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::resolver","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::signal","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::fut","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::registry","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::prelude","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::resolver","",20,[[["self"],["formatter"]],["result"]]],[11,"hash","actix","",4,N],[11,"hash","actix::dev::channel","",64,[[["self"],["h"]]]],[11,"hash","actix","",13,[[["self"],["h"]]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"poll","actix::prelude","",67,[[["self"]],["poll"]]],[11,"poll","","",68,[[["self"]],["poll"]]],[11,"poll","actix::fut","",28,[[["self"]],["poll"]]],[11,"poll","actix::dev::channel","",65,[[["self"]],["poll",["option"]]]],[11,"name","actix","",3,[[["self"]],["option",["str"]]]],[11,"cause","","",3,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",3,[[["self"]],["option",["backtrace"]]]],[11,"name","actix::actors::resolver","",20,[[["self"]],["option",["str"]]]],[11,"cause","","",20,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",20,[[["self"]],["option",["backtrace"]]]],[11,"started","actix::prelude","Called when an actor gets polled the first time.",49,N],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",49,N],[11,"stopped","","Called after an actor is stopped.",49,N],[11,"start","","Start a new asynchronous actor, returning its address.",49,[[["self"]],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",49,[[],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",49,[[["f"]],["addr"]]],[11,"restarting","","Called when the supervisor restarts a failed actor.",52,N],[11,"add_stream","","Registers a stream with the context.",51,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",51,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self.",51,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",51,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",51,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"new","actix::dev","Create new ContextParts instance",62,[[["addresssenderproducer"]],["self"]]],[11,"stop","","Initiate stop process for actor execution",62,[[["self"]]]],[11,"terminate","","Terminate actor execution",62,[[["self"]]]],[11,"state","","Actor execution state",62,[[["self"]],["actorstate"]]],[11,"waiting","","Is context waiting for future completion",62,[[["self"]],["bool"]]],[11,"curr_handle","","Handle of the running future",62,[[["self"]],["spawnhandle"]]],[11,"spawn","","Spawn new future to this context.",62,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","Spawn new future to this context and wait future completion.",62,[[["self"],["f"]]]],[11,"cancel_future","","Cancel previously scheduled future.",62,[[["self"],["spawnhandle"]],["bool"]]],[11,"capacity","","",62,[[["self"]],["usize"]]],[11,"set_mailbox_capacity","","",62,[[["self"],["usize"]]]],[11,"address","","",62,[[["self"]],["addr"]]],[11,"started","","",62,[[["self"]],["bool"]]],[11,"new","","",63,[[["c"],["a"],["mailbox"]],["self"]]],[11,"ctx","","",63,[[["self"]],["c"]]],[11,"address","","",63,[[["self"]],["addr"]]],[11,"alive","","",63,[[["self"]],["bool"]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",56,N],[11,"error","","Method is called when stream emits error.",56,N],[11,"finished","","Method is called when stream finishes.",56,N],[11,"add_stream","","This method register stream to an actor context and allows…",56,N],[11,"connected","actix::dev::channel","Is the channel still open",64,[[["self"]],["bool"]]],[11,"send","","Attempts to send a message on this `Sender<A>` with…",64,[[["self"],["m"]],["result",["receiver","senderror"]]]],[11,"try_send","","Attempts to send a message on this `Sender<A>` without…",64,[[["self"],["m"],["bool"]],["result",["senderror"]]]],[11,"do_send","","Send a message on this `Sender<A>` without blocking.",64,[[["self"],["m"]],["result",["senderror"]]]],[11,"downgrade","","Downgrade to `WeakAddressSender` which can later be upgraded",64,[[["self"]],["weakaddresssender"]]],[11,"connected","","Returns whether any senders are still connected.",65,[[["self"]],["bool"]]],[11,"capacity","","Returns the channel capacity.",65,[[["self"]],["usize"]]],[11,"set_capacity","","Sets the channel capacity.",65,[[["self"],["usize"]]]],[11,"sender","","Returns the sender side of the channel.",65,[[["self"]],["addresssender"]]],[11,"sender_producer","","Creates the sender producer.",65,[[["self"]],["addresssenderproducer"]]],[11,"new","actix::dev","",66,[[["m"],["option",["sender"]]],["envelope"]]],[11,"with_proxy","","",66,[[["box",["envelopeproxy"]]],["envelope"]]],[11,"timeout","actix::prelude","Set message delivery timeout",67,[[["self"],["duration"]],["self"]]],[11,"new","","",68,[[["option",["receiver"]],["option"]],["recipientrequest"]]],[11,"timeout","","Set message delivery timeout",68,[[["self"],["duration"]],["self"]]],[11,"into_inner","","",48,[[["self"]],["t"]]],[11,"new","actix::dev","",69,[[["addressreceiver"]],["self"]]],[11,"capacity","","",69,[[["self"]],["usize"]]],[11,"set_capacity","","",69,[[["self"],["usize"]]]],[11,"connected","","",69,[[["self"]],["bool"]]],[11,"address","","",69,[[["self"]],["addr"]]],[11,"sender_producer","","",69,[[["self"]],["addresssenderproducer"]]],[11,"poll","","",69,N],[11,"new","actix::clock","Return a new `Clock` instance that uses the current…",72,[[],["clock"]]],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the…",72,[[["t"]],["clock"]]],[11,"system","","Return a new `Clock` instance that uses `Instant::now()`…",72,[[],["clock"]]],[11,"now","","Returns an instant corresponding to \"now\" by using the…",72,[[["self"]],["instant"]]]],"paths":[[3,"MessageResult"],[4,"ActorState"],[4,"Running"],[4,"MailboxError"],[3,"SpawnHandle"],[3,"Arbiter"],[3,"ArbiterBuilder"],[3,"Context"],[3,"Response"],[3,"ActorResponse"],[3,"Supervisor"],[3,"System"],[3,"SystemRunner"],[3,"Addr"],[3,"WeakAddr"],[3,"Recipient"],[3,"Mocker"],[3,"Resolve"],[3,"Connect"],[3,"ConnectAddr"],[4,"ResolverError"],[3,"Resolver"],[3,"TcpConnector"],[3,"Signal"],[3,"Subscribe"],[4,"SignalType"],[8,"Now"],[4,"Either"],[3,"Finish"],[8,"ActorFuture"],[8,"ActorStream"],[8,"IntoActorFuture"],[8,"WrapFuture"],[8,"WrapStream"],[8,"WriteHandler"],[3,"Writer"],[3,"FramedWrite"],[3,"StopArbiter"],[3,"StartActor"],[3,"Execute"],[8,"ArbiterService"],[8,"SystemService"],[3,"Registry"],[3,"SystemRegistry"],[3,"SyncArbiter"],[3,"Condition"],[3,"TimerFunc"],[3,"IntervalFunc"],[4,"SendError"],[8,"Actor"],[8,"ActorContext"],[8,"AsyncContext"],[8,"Supervised"],[8,"ContextFutureSpawner"],[8,"Handler"],[8,"Message"],[8,"StreamHandler"],[8,"EnvelopeProxy"],[8,"ToEnvelope"],[8,"AsyncContextParts"],[8,"MessageResponse"],[8,"ResponseChannel"],[3,"ContextParts"],[3,"ContextFut"],[3,"AddressSender"],[3,"AddressReceiver"],[3,"Envelope"],[3,"Request"],[3,"RecipientRequest"],[3,"Mailbox"],[3,"ProcessSignals"],[3,"DefaultSignalsHandler"],[3,"Clock"],[3,"AndThen"],[3,"FromErr"],[3,"Map"],[3,"DropErr"],[3,"MapErr"],[3,"FutureResult"],[3,"StreamAndThen"],[3,"StreamFinish"],[3,"StreamFold"],[3,"StreamMap"],[3,"StreamMapErr"],[3,"StreamThen"],[3,"StreamTimeout"],[3,"Then"],[3,"Timeout"],[3,"FutureWrap"],[3,"StreamWrap"],[3,"SyncContext"],[6,"ResponseActFuture"],[6,"ResponseFuture"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
